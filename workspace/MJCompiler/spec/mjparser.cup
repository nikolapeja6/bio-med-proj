package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import java.io.*;
import org.apache.log4j.*;
import rs.etf.pp1.symboltable.*;
import rs.etf.pp1.symboltable.concepts.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
		
	Logger log = Logger.getLogger(getClass());
	
	boolean syntaxErrorFound = false;
	
	public void report_fatal_error(String message, Object info) throws java.lang.Exception
	{
		done_parsing();
		report_error(message, info);
		Tab.dump();
	}
	
	public void syntax_error(Symbol cur_token)
	{
		report_error("Syntax error", cur_token);
		syntaxErrorFound = true;
	}
	
	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception
	{
		report_fatal_error("Fatal error, parsing cannot continue. Aborting.", cur_token);
	}
	
	public void report_error(String message, Object info)
	{
		StringBuilder msg = new StringBuilder(message);
		if(info instanceof Symbol)
		{
			msg.append(" on line ").append(((Symbol)info).left);
		}
		log.error(msg.toString());
	}
	
	public void report_info(String message, Object info)
	{
		StringBuilder msg = new StringBuilder(message);
		if(info instanceof Symbol)
		{
			msg.append(" on line ").append(((Symbol)info).left);
		}
		log.info(msg.toString());
	}
	
	public void report_debug(String message, Object info)
	{
		StringBuilder msg = new StringBuilder(message);
		if(info instanceof Symbol)
		{
			msg.append(" on line ").append(((Symbol)info).left);
		}
		log.debug(msg.toString());
	}
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if(s != null && s.value != null)
		log.debug(s.toString() + " " + s.value.toString());
	return s;
:}



/** LITERALS */
terminal Integer NUMBER;
terminal String BOOL;


/** PUNCTUATION */
terminal COMMA, SEMICOLON, DOT;
terminal RULE_END;


/** OPERATORS */

/** ARITHMETIC OPERATORS */
terminal PLUS, MINUS, MULTUPLY, DIV;



/** COMPARISON OPERATORS */
terminal EQUAL, NOT_EQUAL, GREATER, LESS, GREATER_OR_EQUEL, LESS_OR_EQUEL;

/** LOGIC OPERATORS */
terminal AND, OR;

/** ASSIGNMENT */
terminal ASSIGN;


/** END OF OPERATORS */


/** PARENTHESES */
terminal	OPEN_PARENTHESES, 	CLOSE_PARENTHESES;


terminal String IDENT;

/**
 * END OF TERMINALS
 */




/** NON TERMINALS */

non terminal rs.etf.pp1.symboltable.concepts.Obj Program;
non terminal rs.etf.pp1.symboltable.concepts.Obj Rule;
non terminal rs.etf.pp1.symboltable.concepts.Obj Const;
non terminal rs.etf.pp1.symboltable.concepts.Obj Condition;
non terminal rs.etf.pp1.symboltable.concepts.Obj ConditionList;
non terminal rs.etf.pp1.symboltable.concepts.Obj ConditionElement;
non terminal rs.etf.pp1.symboltable.concepts.Obj CondTerm;
non terminal rs.etf.pp1.symboltable.concepts.Obj CondTermList;
non terminal rs.etf.pp1.symboltable.concepts.Obj CondTermElement;
non terminal rs.etf.pp1.symboltable.concepts.Obj CondFact;
non terminal rs.etf.pp1.symboltable.concepts.Obj CondFactList;
non terminal rs.etf.pp1.symboltable.concepts.Obj CondFactElement;

non terminal rs.etf.pp1.symboltable.concepts.Obj Value;
non terminal rs.etf.pp1.symboltable.concepts.Obj Expr;
non terminal rs.etf.pp1.symboltable.concepts.Obj OptionalExprList;
non terminal rs.etf.pp1.symboltable.concepts.Obj ExprList;
non terminal rs.etf.pp1.symboltable.concepts.Obj ExprElement;
non terminal rs.etf.pp1.symboltable.concepts.Obj Term;
non terminal rs.etf.pp1.symboltable.concepts.Obj TermList;
non terminal rs.etf.pp1.symboltable.concepts.Obj TermElement;
non terminal rs.etf.pp1.symboltable.concepts.Obj Factor;
non terminal rs.etf.pp1.symboltable.concepts.Obj Relop;
non terminal rs.etf.pp1.symboltable.concepts.Obj Addop;
non terminal rs.etf.pp1.symboltable.concepts.Obj Mulop;






Program ::= (Program1)Rule
			|
			(Program2) Program Rule
			;
			
Rule ::= (Rule1) IDENT ASSIGN Condition RULE_END;


Condition ::= 	(ConditionMultiple) CondTerm ConditionList
				|
				(ConditionSingle) CondTerm
				;

ConditionList ::= 	(ConditionListMultiple) ConditionList ConditionElement
					|
					(ConditionListSingle) ConditionElement
					;
					
/*TODO generate code*/					
ConditionElement ::= (ConditionElement1) OR CondTerm
					;

CondTerm ::= 	(CondTermMultiple) CondFact CondTermList
				|
				(CondTermSingle) CondFact
				;

CondTermList ::= 	(CondTermListMultiple) CondTermList CondTermElement
					|
					(CondTermListSingle) CondTermElement
					;
					
/*TODO generate code*/					
CondTermElement ::= (CondTermElement1) AND CondFact
					;

CondFact ::= 	(CondFactMultiple) Expr CondFactList
				|
				(CondFactSingle) Expr
				;

CondFactList ::= 	(CondFactListMultiple) CondFactList CondFactElement
					|
					(CondFactListSingle) CondFactElement
					;
					
CondFactElement ::= (CondFactElement1) Relop Expr;








Expr ::=	(ExprWithMinus) MINUS Term:term OptionalExprList
			|
			(ExprWithNoMinus)Term:term OptionalExprList
			;
			
OptionalExprList ::= 	ExprList:list
						|
						/* empty */
						;
						
ExprList ::= 	ExprList ExprElement
				|
				ExprElement
				;


ExprElement ::= (ExprElement1) Addop Term;

Term ::= 	(MultiFactorTerm) Factor:factor TermList
			| 
			(SingleFactorTerm) Factor:factor
			;
			
TermList ::=	(TermListMultiple) TermList TermElement
				|
				(TermListSingle) TermElement
				;
				
TermElement ::= (TermElement1) Mulop Factor;
			
			
Factor ::= (ConstFactor) Const
			|
			(IdentFactor) IDENT
			;
			
Relop ::= 	(RelopEq) EQUAL
			|
			(RelopNEq) NOT_EQUAL
			|
			(RelopGr)GREATER
			|
			(RelopLs)LESS
			|
			(RelopGEq)GREATER_OR_EQUEL
			|
			(RelopLEq)LESS_OR_EQUEL
;

Addop ::= 	(AddopPlus)PLUS
			|
			(AddopMinus)MINUS
			;
			
Mulop ::= 	(MulopMultiply)MULTUPLY
			|
			(MulopDiv)DIV
			;

			
Const ::= (ConstNum) NUMBER
			|
			(ConstBool) BOOL
			;


